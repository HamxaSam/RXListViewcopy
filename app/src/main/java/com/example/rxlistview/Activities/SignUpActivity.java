package com.example.rxlistview.Activities;import android.annotation.TargetApi;import android.content.Intent;import android.os.Build;import android.os.Bundle;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.example.rxlistview.R;import com.example.rxlistview.model.User;import com.example.rxlistview.sql.DatabaseHelper;import com.jakewharton.rxbinding2.widget.RxTextView;import io.reactivex.Observable;import io.reactivex.functions.Function4;import io.reactivex.observers.DisposableObserver;public class SignUpActivity extends AppCompatActivity {    EditText et_name, et_password,edit_email,edit_contact;    TextView tv_status;    Button btn_login;    DatabaseHelper databaseHelper;    Observable<Boolean> observable;    @TargetApi(Build.VERSION_CODES.N)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView( R.layout.activity_signup );        init();        click();    }    private void click() {        btn_login.setOnClickListener ( new View.OnClickListener ( ) {            @Override            public void onClick(View v) {                User user = new User (et_name.getText ().toString ().trim (),et_password.getText ().toString ().trim (),                                      edit_email.getText ().toString ().trim (),edit_contact.getText ().toString ().trim () );                if(isValidForm ( et_name.getText ().toString ().trim (),et_password.getText ().toString ().trim (),                              edit_email.getText ().toString ().trim (),edit_contact.getText ().toString ().trim ()  )){                    if(databaseHelper.checkUser ( edit_email.getText ().toString ().trim () )){                        Toast.makeText ( SignUpActivity.this, "User Already Exited Try With Other Email", Toast.LENGTH_SHORT ).show ( );                    }else{                        databaseHelper.addUser ( user );                        startActivity ( new Intent ( SignUpActivity.this,LoginActivity.class ) );                        finish ();                    }                }else{                    Toast.makeText ( SignUpActivity.this, "Some thing Wrong", Toast.LENGTH_SHORT ).show ( );                }            }        } );    }    @RequiresApi(api = Build.VERSION_CODES.N)    private void init() {        et_name = findViewById(R.id.et_name);        et_password = findViewById(R.id.et_password);        btn_login = findViewById(R.id.btn_login);        tv_status = findViewById(R.id.tv_status);        edit_email = findViewById(R.id.edit_email);        edit_contact = findViewById(R.id.edit_contact);        databaseHelper = new DatabaseHelper ( getApplicationContext ());        Observable<String>  nameObser = RxTextView.textChanges ( et_name ).skip ( 1 ).map ( new io.reactivex.functions.Function<CharSequence, String> ( ) {            @Override            public String apply(CharSequence charSequence) throws Exception {                return charSequence.toString ();            }        });        Observable<String>  pswdObser = RxTextView.textChanges ( et_password ).skip ( 1 ).map ( new io.reactivex.functions.Function<CharSequence, String> ( ) {            @Override            public String apply(CharSequence charSequence) throws Exception {                return charSequence.toString ();            }        });        Observable<String>  cntctObser = RxTextView.textChanges ( edit_contact ).skip ( 1 ).map ( new io.reactivex.functions.Function<CharSequence, String> ( ) {            @Override            public String apply(CharSequence charSequence) throws Exception {                return charSequence.toString ();            }        });        Observable<String>  mailObser = RxTextView.textChanges ( edit_email ).skip ( 1 ).map ( new io.reactivex.functions.Function<CharSequence, String> ( ) {            @Override            public String apply(CharSequence charSequence) throws Exception {                return charSequence.toString ();            }        });        observable = Observable.combineLatest ( nameObser, pswdObser, cntctObser, mailObser, new Function4<String, String, String, String, Boolean> ( ) {            @Override            public Boolean apply(String name, String password, String contact, String mail) throws Exception {                return isValidForm (name,password,contact,mail  );            }        } );        observable.subscribe(new DisposableObserver<Boolean> () {            @Override            public void onNext(Boolean aBoolean) {                updateButton(aBoolean);            }            @Override            public void onError(Throwable e) {            }            @Override            public void onComplete() {            }        });    }    public void updateButton(boolean valid) {        if (valid)            btn_login.setEnabled(true);    }    public boolean isValidForm(String name, String password,String contact, String mail) {        boolean validName = !name.isEmpty();        if (!validName) {            et_name.setError("Please enter valid name");        }        boolean validContact = !contact.isEmpty() || contact.equals (  edit_contact.getText ().toString ().length ()<11) ;        if (!validName) {            et_name.setError("Enter valid Conatact #");        }        boolean validEmail = !mail.isEmpty() || !mail.matches ( "[a-zA-Z0-9._-]+@[a-z]+.[a-z]+" ) ;        if (!validName) {            et_name.setError("Enter Proper Email Address");        }        boolean validPass = !password.isEmpty() && password.equals(et_password.getText ().toString ().trim ()) || password.equals ( et_password.getText ().toString ().length ()<6);        if (!validPass) {            et_password.setError("Incorrect password or length is short");        }        return validName && validPass && validContact && validEmail;    }}