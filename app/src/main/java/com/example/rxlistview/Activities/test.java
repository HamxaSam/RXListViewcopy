package com.example.rxlistview.Activities;import android.app.AlarmManager;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.app.job.JobInfo;import android.app.job.JobScheduler;import android.content.ComponentName;import android.content.Intent;import android.hardware.Sensor;import android.hardware.SensorManager;import android.os.Build;import android.os.Bundle;import android.util.Log;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import androidx.work.Constraints;import androidx.work.OneTimeWorkRequest;import androidx.work.PeriodicWorkRequest;import androidx.work.WorkManager;import com.example.rxlistview.R;import com.example.rxlistview.helpers.MyInterface;import com.example.rxlistview.helpers.MyInterfaceObject;import com.example.rxlistview.helpers.MyReceiver;import com.example.rxlistview.helpers.MyService;import com.example.rxlistview.helpers.WorkingMang;import com.example.rxlistview.helpers.WorkingPeriods;import com.google.firebase.remoteconfig.FirebaseRemoteConfig;import java.io.Serializable;import java.util.concurrent.TimeUnit;public class test extends AppCompatActivity {    TextView textX, textY, textZ;    SensorManager sensorManager;    Sensor sensor;    Button notificat, periodic;    JobScheduler jobSchedul;    ComponentName componentNam;    FirebaseRemoteConfig firebaseRemoteConfig;////    mDPM.wipeData(0);    @RequiresApi(api = Build.VERSION_CODES.O)    public void onCreate(Bundle savedInstanceState) {        super.onCreate ( savedInstanceState );        setContentView ( R.layout.activity_test );        notificat = findViewById ( R.id.notificat );        periodic = findViewById ( R.id.periodic );        notificat.setOnClickListener ( v->{            Toast.makeText ( this, "some thing new ", Toast.LENGTH_SHORT ).show ( );        } );        // fr 22 api or less user job schedular if no play services used        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {            jobSchedul = (JobScheduler) getApplicationContext ( )                    .getSystemService ( JOB_SCHEDULER_SERVICE );            componentNam = new ComponentName ( this, MyService.class );        }//        Context foreignContext = null;//        try {//            foreignContext = createPackageContext( "com.android.settings", Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE);//        } catch (PackageManager.NameNotFoundException e) {//            e.printStackTrace ( );//        }//        Class<?> yourClass = null;//        try {//            yourClass = foreignContext.getClassLoader().loadClass("com.android.settings.MasterClear");//        } catch (ClassNotFoundException e) {//            e.printStackTrace ( );//        }//        Intent intent = new Intent(foreignContext, yourClass);//        startActivity(intent);////        String firebaseId = FirebaseInstanceId.getInstance ( ).getToken ( );//        Log.d ( "firebaseId", firebaseId );////        firebaseRemoteConfig = FirebaseRemoteConfig.getInstance ( );//        FirebaseRemoteConfigSettings settings = new FirebaseRemoteConfigSettings.Builder ( ).build ( );//        firebaseRemoteConfig.setConfigSettings ( settings );////        Map<String, Object> map = new HashMap<> ( );//        map.put ( "update_app", "version_1" );//        map.put ( "test", "false" );//        map.put ( "Model_data", "{\"test\":\"hello to json\",\"image\":\"this is false img value\",\"link\":\"this is link value\"}" );//        firebaseRemoteConfig.setDefaults ( map );//        firebaseRemoteConfig.fetch ( ).addOnCompleteListener ( task -> {//            if (task.isSuccessful ( )) {//                firebaseRemoteConfig.activateFetched ( );//                Model_data model = new Gson ( ).fromJson (//                        firebaseRemoteConfig.getString ( "Model_data" ),//                        new TypeToken<Model_data> ( ) {//                        }.getType ( )//                );//                if (model != null) {//                    Toast.makeText ( this, model.getImage ( ) + "", Toast.LENGTH_SHORT ).show ( );//                    Toast.makeText ( this, firebaseRemoteConfig.getString ( "update_app" ) + ". " + firebaseRemoteConfig.getBoolean ( "test" ) + "", Toast.LENGTH_SHORT ).show ( );//                } else {//                    Toast.makeText ( this, task.getException ( ).getMessage ( ) + "model may be empty", Toast.LENGTH_SHORT ).show ( );////                }//            } else {//                Toast.makeText ( this, task.getException ( ).getMessage ( ) + "", Toast.LENGTH_SHORT ).show ( );//            }////        } );        OneTimeWorkRequest simpleRequest = new OneTimeWorkRequest.Builder ( WorkingMang.class )                .build ( );        notificat.setOnClickListener ( v -> {        } );        periodic.setOnClickListener ( v -> {            Toast.makeText ( this, "periodic", Toast.LENGTH_SHORT ).show ( );            if (android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.M) {                Intent intent = new Intent(getApplicationContext (), MyReceiver.class);                PendingIntent pendingIntent = PendingIntent.getBroadcast( getApplicationContext(), 234324243, intent, 0);                AlarmManager alarmManager = (AlarmManager) getApplicationContext ().getSystemService( ALARM_SERVICE);                alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis()+(1 * 1000), pendingIntent);            }else if(android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.M){                JobInfo jobInfoObj = new JobInfo.Builder ( 1, componentNam )                        .setPeriodic ( 10000 ).build ( );                jobSchedul.schedule ( jobInfoObj );//                PeriodicWorkRequest.Builder builder = new PeriodicWorkRequest.Builder ( WorkingPeriods.class, 1, TimeUnit.MINUTES );//                builder.setConstraints ( Constraints.NONE );//                PeriodicWorkRequest workRequest = builder.build ( );//                WorkManager.getInstance ( ).enqueue ( workRequest );            }        } );//        sensorManager = (SensorManager) getSystemService ( SENSOR_SERVICE );//        sensor = sensorManager.getDefaultSensor ( Sensor.TYPE_ACCELEROMETER );//    }}