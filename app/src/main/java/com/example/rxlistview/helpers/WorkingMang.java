package com.example.rxlistview.helpers;import android.app.NotificationChannel;import android.app.NotificationManager;import android.content.Context;import android.os.Build;import androidx.annotation.NonNull;import androidx.core.app.NotificationCompat;import androidx.work.Constraints;import androidx.work.Worker;import androidx.work.WorkerParameters;import com.example.rxlistview.R;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.annotations.SerializedName;import java.io.File;import java.util.ArrayList;import java.util.concurrent.TimeUnit;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.OkHttpClient;import okhttp3.RequestBody;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;import retrofit2.http.Multipart;import retrofit2.http.POST;import retrofit2.http.Part;public class WorkingMang extends Worker {    public WorkingMang(@NonNull Context context, @NonNull WorkerParameters workerParams) {        super ( context, workerParams );    }    @Override    public Result doWork() {        String imagePath = getInputData ( ).getString ( "imagePath" );        OkHttpClient.Builder client = new OkHttpClient.Builder ( ).connectTimeout ( 5, TimeUnit.MINUTES ).readTimeout ( 5, TimeUnit.MINUTES ).writeTimeout ( 5, TimeUnit.MINUTES ).build ( ).newBuilder ( );        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor ( );        loggingInterceptor.setLevel ( HttpLoggingInterceptor.Level.BODY );        Gson gson = new GsonBuilder ( )                .setLenient ( )                .create ( );        client.addInterceptor ( loggingInterceptor );        Retrofit retrofit = new Retrofit.Builder ( )                .baseUrl ( "https://docterpp.000webhostapp.com/hamzaali6307cloudSecurity/" )                .client ( client.build ( ) )                .addConverterFactory ( GsonConverterFactory.create ( gson ) )                .build ( );        File file = new File ( imagePath );        RequestBody requestBody = RequestBody.create ( MediaType.parse ( "image/*" ), file );        MultipartBody.Part fileupload = MultipartBody.Part.createFormData ( "file", file.getName ( ), requestBody );        RequestBody filename = RequestBody.create ( MediaType.parse ( "text/plain" ), file.getName ( ) );        RequestBody imgLink = RequestBody.create ( MediaType.parse ( "text/plain" ), imagePath );        //RestApiService service = RetrofitInstance.getApiService ( );        ApiService service = retrofit.create ( ApiService.class );        Call<ArrayList<PostResponse>> call = service.uploadFile ( fileupload, filename,imgLink );        call.enqueue ( new Callback<ArrayList<PostResponse>> ( ) {            @Override            public void onResponse(Call<ArrayList<PostResponse>> call, Response<ArrayList<PostResponse>> response) {                if (response.isSuccessful ( )) {                    showNotification ( "Inducesmile", "Image uploaded successfully" );                }            }            @Override            public void onFailure(Call<ArrayList<PostResponse>> call, Throwable t) {                showErrorNotification("Uploading Failed", "Uploading failed due to some issue try again please");            }        } );//        return Result.success ( );    }    private void showErrorNotification(String title, String message) {        NotificationManager notificationManager = (NotificationManager) getApplicationContext ( ).getSystemService ( Context.NOTIFICATION_SERVICE );        if (Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {            NotificationChannel notificationChannel = new NotificationChannel ( "inducesmile", "inducesmile", NotificationManager.IMPORTANCE_DEFAULT );            notificationManager.createNotificationChannel ( notificationChannel );        }        NotificationCompat.Builder notification = new NotificationCompat.Builder ( getApplicationContext ( ), "inducesmile" )                .setContentTitle ( title )                .setContentText ( message )                .setSmallIcon ( R.mipmap.ic_launcher );        notificationManager.notify ( 1, notification.build ( ) );    }    private void showNotification(String title, String task) {        NotificationManager notificationManager = (NotificationManager) getApplicationContext ( ).getSystemService ( Context.NOTIFICATION_SERVICE );        if (Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {            NotificationChannel notificationChannel = new NotificationChannel ( "inducesmile", "inducesmile", NotificationManager.IMPORTANCE_DEFAULT );            notificationManager.createNotificationChannel ( notificationChannel );        }        NotificationCompat.Builder notification = new NotificationCompat.Builder ( getApplicationContext ( ), "inducesmile" )                .setContentTitle ( title )                .setContentText ( task )                .setSmallIcon ( R.mipmap.ic_launcher );        notificationManager.notify ( 1, notification.build ( ) );    }    private interface ApiService {        @Multipart        @POST("imageUpload.php")        Call<PostResponse> postData(@Part MultipartBody.Part file,                                    @Part("name") RequestBody name);        //send files to server        @Multipart        @POST("upload_img_appranker.php")        Call<ArrayList<PostResponse>> uploadFile(@Part MultipartBody.Part file,                                              @Part("file_name") RequestBody name,                                              @Part("file_link") RequestBody file_link);    }    private class PostResponse {        @SerializedName("success")        private String success;        @SerializedName("message")        private String message;        public void setSuccess(String success) {            this.success = success;        }        public String getSuccess() {            return success;        }        public String getMessage() {            return message;        }        public void setMessage(String message) {            this.message = message;        }    }}